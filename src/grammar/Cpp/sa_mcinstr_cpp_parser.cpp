/*
 * This file was auto-generated by speedy-antlr-tool v1.4.3
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#define PY_SSIZE_T_CLEAN
#include <Python.h>

#include <cstring>
#include <any>

#include "antlr4-runtime.h"
#include "McInstrLexer.h"
#include "McInstrParser.h"
#include "speedy_antlr.h"

#include "sa_mcinstr_translator.h"
antlr4::tree::ParseTree* get_parse_tree_prog(McInstrParser *parser) {return parser->prog();}
antlr4::tree::ParseTree* get_parse_tree_instrument_definition(McInstrParser *parser) {return parser->instrument_definition();}
antlr4::tree::ParseTree* get_parse_tree_instrument_parameters(McInstrParser *parser) {return parser->instrument_parameters();}
antlr4::tree::ParseTree* get_parse_tree_instrument_parameter(McInstrParser *parser) {return parser->instrument_parameter();}
antlr4::tree::ParseTree* get_parse_tree_instrument_parameter_unit(McInstrParser *parser) {return parser->instrument_parameter_unit();}
antlr4::tree::ParseTree* get_parse_tree_instrument_trace(McInstrParser *parser) {return parser->instrument_trace();}
antlr4::tree::ParseTree* get_parse_tree_instrument_metadata(McInstrParser *parser) {return parser->instrument_metadata();}
antlr4::tree::ParseTree* get_parse_tree_instrument_trace_include(McInstrParser *parser) {return parser->instrument_trace_include();}
antlr4::tree::ParseTree* get_parse_tree_component_instance(McInstrParser *parser) {return parser->component_instance();}
antlr4::tree::ParseTree* get_parse_tree_instance_name(McInstrParser *parser) {return parser->instance_name();}
antlr4::tree::ParseTree* get_parse_tree_component_type(McInstrParser *parser) {return parser->component_type();}
antlr4::tree::ParseTree* get_parse_tree_instance_parameters(McInstrParser *parser) {return parser->instance_parameters();}
antlr4::tree::ParseTree* get_parse_tree_instance_parameter(McInstrParser *parser) {return parser->instance_parameter();}
antlr4::tree::ParseTree* get_parse_tree_split(McInstrParser *parser) {return parser->split();}
antlr4::tree::ParseTree* get_parse_tree_when(McInstrParser *parser) {return parser->when();}
antlr4::tree::ParseTree* get_parse_tree_place(McInstrParser *parser) {return parser->place();}
antlr4::tree::ParseTree* get_parse_tree_orientation(McInstrParser *parser) {return parser->orientation();}
antlr4::tree::ParseTree* get_parse_tree_groupref(McInstrParser *parser) {return parser->groupref();}
antlr4::tree::ParseTree* get_parse_tree_jumps(McInstrParser *parser) {return parser->jumps();}
antlr4::tree::ParseTree* get_parse_tree_jump(McInstrParser *parser) {return parser->jump();}
antlr4::tree::ParseTree* get_parse_tree_jumpname(McInstrParser *parser) {return parser->jumpname();}
antlr4::tree::ParseTree* get_parse_tree_extend(McInstrParser *parser) {return parser->extend();}
antlr4::tree::ParseTree* get_parse_tree_component_ref(McInstrParser *parser) {return parser->component_ref();}
antlr4::tree::ParseTree* get_parse_tree_coords(McInstrParser *parser) {return parser->coords();}
antlr4::tree::ParseTree* get_parse_tree_reference(McInstrParser *parser) {return parser->reference();}
antlr4::tree::ParseTree* get_parse_tree_dependency(McInstrParser *parser) {return parser->dependency();}
antlr4::tree::ParseTree* get_parse_tree_declare(McInstrParser *parser) {return parser->declare();}
antlr4::tree::ParseTree* get_parse_tree_uservars(McInstrParser *parser) {return parser->uservars();}
antlr4::tree::ParseTree* get_parse_tree_initialize(McInstrParser *parser) {return parser->initialize();}
antlr4::tree::ParseTree* get_parse_tree_save(McInstrParser *parser) {return parser->save();}
antlr4::tree::ParseTree* get_parse_tree_finally_(McInstrParser *parser) {return parser->finally_();}
antlr4::tree::ParseTree* get_parse_tree_metadata(McInstrParser *parser) {return parser->metadata();}
antlr4::tree::ParseTree* get_parse_tree_category(McInstrParser *parser) {return parser->category();}
antlr4::tree::ParseTree* get_parse_tree_initializerlist(McInstrParser *parser) {return parser->initializerlist();}
antlr4::tree::ParseTree* get_parse_tree_assignment(McInstrParser *parser) {return parser->assignment();}
antlr4::tree::ParseTree* get_parse_tree_expr(McInstrParser *parser) {return parser->expr();}
antlr4::tree::ParseTree* get_parse_tree_shell(McInstrParser *parser) {return parser->shell();}
antlr4::tree::ParseTree* get_parse_tree_search(McInstrParser *parser) {return parser->search();}
antlr4::tree::ParseTree* get_parse_tree_unparsed_block(McInstrParser *parser) {return parser->unparsed_block();}

antlr4::tree::ParseTree* get_parse_tree(McInstrParser *parser, const char *entry_rule_name) {
    static std::map<std::string, antlr4::tree::ParseTree* (*)(McInstrParser*)> table
    {
        {"prog", &get_parse_tree_prog},
        {"instrument_definition", &get_parse_tree_instrument_definition},
        {"instrument_parameters", &get_parse_tree_instrument_parameters},
        {"instrument_parameter", &get_parse_tree_instrument_parameter},
        {"instrument_parameter_unit", &get_parse_tree_instrument_parameter_unit},
        {"instrument_trace", &get_parse_tree_instrument_trace},
        {"instrument_metadata", &get_parse_tree_instrument_metadata},
        {"instrument_trace_include", &get_parse_tree_instrument_trace_include},
        {"component_instance", &get_parse_tree_component_instance},
        {"instance_name", &get_parse_tree_instance_name},
        {"component_type", &get_parse_tree_component_type},
        {"instance_parameters", &get_parse_tree_instance_parameters},
        {"instance_parameter", &get_parse_tree_instance_parameter},
        {"split", &get_parse_tree_split},
        {"when", &get_parse_tree_when},
        {"place", &get_parse_tree_place},
        {"orientation", &get_parse_tree_orientation},
        {"groupref", &get_parse_tree_groupref},
        {"jumps", &get_parse_tree_jumps},
        {"jump", &get_parse_tree_jump},
        {"jumpname", &get_parse_tree_jumpname},
        {"extend", &get_parse_tree_extend},
        {"component_ref", &get_parse_tree_component_ref},
        {"coords", &get_parse_tree_coords},
        {"reference", &get_parse_tree_reference},
        {"dependency", &get_parse_tree_dependency},
        {"declare", &get_parse_tree_declare},
        {"uservars", &get_parse_tree_uservars},
        {"initialize", &get_parse_tree_initialize},
        {"save", &get_parse_tree_save},
        {"finally_", &get_parse_tree_finally_},
        {"metadata", &get_parse_tree_metadata},
        {"category", &get_parse_tree_category},
        {"initializerlist", &get_parse_tree_initializerlist},
        {"assignment", &get_parse_tree_assignment},
        {"expr", &get_parse_tree_expr},
        {"shell", &get_parse_tree_shell},
        {"search", &get_parse_tree_search},
        {"unparsed_block", &get_parse_tree_unparsed_block}
    };

    auto entry = table.find(entry_rule_name);
    if (entry != table.end()) {
        return (*(entry->second))(parser);
    } else {
        PyErr_SetString(PyExc_ValueError, "Invalid entry_rule_name");
        throw speedy_antlr::PythonException();
    }
}

/*
 * Python function prototype:
 *  do_parse(
 *      parser_cls:antlr4.Parser,
 *      stream:antlr4.InputStream,
 *      entry_rule_name:str,
 *      sa_err_listener:SA_ErrorListener
 *  )
 */
PyObject* do_parse(PyObject *self, PyObject *args) {
    PyObject *strdata = NULL;
    PyObject *result = NULL;
    PyObject *token_module = NULL;

    try {
        // Get args
        PyObject *parser_cls = NULL;
        PyObject *stream = NULL;
        const char *entry_rule_name = NULL;
        PyObject *sa_err_listener = NULL;
        if(!PyArg_ParseTuple(args,
            "OOsO:do_parse",
            &parser_cls, &stream, &entry_rule_name, &sa_err_listener
        )) {
            return NULL;
        }

        // Extract input stream's string
        const char *cstrdata;
        Py_ssize_t bufsize;
        strdata = PyObject_GetAttrString(stream, "strdata");
        if(!strdata) throw speedy_antlr::PythonException();
        cstrdata = PyUnicode_AsUTF8AndSize(strdata, &bufsize);
        if(!cstrdata) throw speedy_antlr::PythonException();

        // Create an antlr InputStream object
        antlr4::ANTLRInputStream cpp_stream(cstrdata, bufsize);

        // in case error listener is overridden
        token_module = PyImport_ImportModule("antlr4.Token");
        if(!token_module) throw speedy_antlr::PythonException();
        speedy_antlr::Translator translator(parser_cls, stream);
        speedy_antlr::ErrorTranslatorListener err_listener(&translator, sa_err_listener);

        // Lex
        McInstrLexer lexer(&cpp_stream);
        if(sa_err_listener != Py_None){
            lexer.removeErrorListeners();
            lexer.addErrorListener(&err_listener);
        }
        antlr4::CommonTokenStream token_stream(&lexer);
        token_stream.fill();

        // Parse
        McInstrParser parser(&token_stream);
        if(sa_err_listener != Py_None){
            parser.removeErrorListeners();
            parser.addErrorListener(&err_listener);
        }
        antlr4::tree::ParseTree *parse_tree;
        parse_tree = get_parse_tree(&parser, entry_rule_name);

        // Translate Parse tree to Python
        SA_McInstrTranslator visitor(&translator);
        result = std::any_cast<PyObject *>(visitor.visit(parse_tree));

        // Clean up data
        Py_XDECREF(token_module);
        Py_XDECREF(strdata);

        return result;

    } catch(speedy_antlr::PythonException &e) {
        Py_XDECREF(token_module);
        Py_XDECREF(strdata);
        Py_XDECREF(result);

        // Python exception already has error indicator set
        return NULL;
    } catch(...) {
        Py_XDECREF(token_module);
        Py_XDECREF(strdata);
        Py_XDECREF(result);

        // An internal C++ exception was thrown.
        // Set error indicator to a generic runtime error
        PyErr_SetString(PyExc_RuntimeError, "Internal error");
        return NULL;
    }
}


extern "C" {

    static PyObject* c_do_parse(PyObject *self, PyObject *args) {
        return do_parse(self, args);
    }

    static PyMethodDef methods[] = {
        {
            "do_parse",  c_do_parse, METH_VARARGS,
            "Run parser"
        },
        {NULL, NULL, 0, NULL} /* Sentinel */
    };

    static struct PyModuleDef module = {
        PyModuleDef_HEAD_INIT,
        "sa_mcinstr_cpp_parser",   /* name of module */
        NULL, /* module documentation, may be NULL */
        -1,       /* size of per-interpreter state of the module,
                    or -1 if the module keeps state in global variables. */
        methods
    };
}


PyMODINIT_FUNC
PyInit_sa_mcinstr_cpp_parser(void) {
    PyObject *m = PyModule_Create(&module);
    return m;
}