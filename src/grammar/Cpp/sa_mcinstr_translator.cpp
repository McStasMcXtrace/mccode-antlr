/*
 * This file was auto-generated by speedy-antlr-tool v1.4.3
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#include "sa_mcinstr_translator.h"


SA_McInstrTranslator::SA_McInstrTranslator(speedy_antlr::Translator *translator) {
    this->translator = translator;
}

SA_McInstrTranslator::~SA_McInstrTranslator() {
    Py_XDECREF(ProgContext_cls);
    Py_XDECREF(Instrument_definitionContext_cls);
    Py_XDECREF(Instrument_parametersContext_cls);
    Py_XDECREF(InstrumentParameterIntegerContext_cls);
    Py_XDECREF(InstrumentParameterDoubleContext_cls);
    Py_XDECREF(InstrumentParameterStringContext_cls);
    Py_XDECREF(Instrument_parameter_unitContext_cls);
    Py_XDECREF(Instrument_traceContext_cls);
    Py_XDECREF(Instrument_metadataContext_cls);
    Py_XDECREF(Instrument_trace_includeContext_cls);
    Py_XDECREF(Component_instanceContext_cls);
    Py_XDECREF(InstanceNameCopyIdentifierContext_cls);
    Py_XDECREF(InstanceNameCopyContext_cls);
    Py_XDECREF(InstanceNameIdentifierContext_cls);
    Py_XDECREF(ComponentTypeIdentifierContext_cls);
    Py_XDECREF(ComponentTypeCopyContext_cls);
    Py_XDECREF(Instance_parametersContext_cls);
    Py_XDECREF(InstanceParameterExprContext_cls);
    Py_XDECREF(InstanceParameterNullContext_cls);
    Py_XDECREF(InstanceParameterVectorContext_cls);
    Py_XDECREF(SplitContext_cls);
    Py_XDECREF(WhenContext_cls);
    Py_XDECREF(PlaceContext_cls);
    Py_XDECREF(OrientationContext_cls);
    Py_XDECREF(GrouprefContext_cls);
    Py_XDECREF(JumpsContext_cls);
    Py_XDECREF(JumpContext_cls);
    Py_XDECREF(JumpPreviousContext_cls);
    Py_XDECREF(JumpMyselfContext_cls);
    Py_XDECREF(JumpIdentifierContext_cls);
    Py_XDECREF(JumpNextContext_cls);
    Py_XDECREF(ExtendContext_cls);
    Py_XDECREF(Component_refContext_cls);
    Py_XDECREF(CoordsContext_cls);
    Py_XDECREF(ReferenceContext_cls);
    Py_XDECREF(DependencyContext_cls);
    Py_XDECREF(DeclareBlockContext_cls);
    Py_XDECREF(DeclareBlockCopyContext_cls);
    Py_XDECREF(UservarsContext_cls);
    Py_XDECREF(InitializeBlockContext_cls);
    Py_XDECREF(InitializeBlockCopyContext_cls);
    Py_XDECREF(SaveBlockCopyContext_cls);
    Py_XDECREF(SaveBlockContext_cls);
    Py_XDECREF(FinallyBlockContext_cls);
    Py_XDECREF(FinallyBlockCopyContext_cls);
    Py_XDECREF(MetadataContext_cls);
    Py_XDECREF(CategoryContext_cls);
    Py_XDECREF(InitializerlistContext_cls);
    Py_XDECREF(AssignmentContext_cls);
    Py_XDECREF(ExpressionBinaryModContext_cls);
    Py_XDECREF(ExpressionBinaryLessContext_cls);
    Py_XDECREF(ExpressionBinaryGreaterContext_cls);
    Py_XDECREF(ExpressionBinaryLessEqualContext_cls);
    Py_XDECREF(ExpressionArrayAccessContext_cls);
    Py_XDECREF(ExpressionBinaryLogicContext_cls);
    Py_XDECREF(ExpressionIntegerContext_cls);
    Py_XDECREF(ExpressionBinaryRightShiftContext_cls);
    Py_XDECREF(ExpressionMyselfContext_cls);
    Py_XDECREF(ExpressionPreviousContext_cls);
    Py_XDECREF(ExpressionIdentifierContext_cls);
    Py_XDECREF(ExpressionStructAccessContext_cls);
    Py_XDECREF(ExpressionFunctionCallContext_cls);
    Py_XDECREF(ExpressionBinaryMDContext_cls);
    Py_XDECREF(ExpressionStringContext_cls);
    Py_XDECREF(ExpressionGroupingContext_cls);
    Py_XDECREF(ExpressionExponentiationContext_cls);
    Py_XDECREF(ExpressionBinaryLeftShiftContext_cls);
    Py_XDECREF(ExpressionBinaryGreaterEqualContext_cls);
    Py_XDECREF(ExpressionZeroContext_cls);
    Py_XDECREF(ExpressionUnaryPMContext_cls);
    Py_XDECREF(ExpressionTrinaryLogicContext_cls);
    Py_XDECREF(ExpressionFloatContext_cls);
    Py_XDECREF(ExpressionPointerAccessContext_cls);
    Py_XDECREF(ExpressionBinaryEqualContext_cls);
    Py_XDECREF(ExpressionBinaryPMContext_cls);
    Py_XDECREF(ExpressionUnaryLogicContext_cls);
    Py_XDECREF(ShellContext_cls);
    Py_XDECREF(SearchPathContext_cls);
    Py_XDECREF(SearchShellContext_cls);
    Py_XDECREF(Unparsed_blockContext_cls);
}


antlrcpp::Any SA_McInstrTranslator::visitProg(McInstrParser::ProgContext *ctx){
    if(!ProgContext_cls) ProgContext_cls = PyObject_GetAttrString(translator->parser_cls, "ProgContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ProgContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstrument_definition(McInstrParser::Instrument_definitionContext *ctx){
    if(!Instrument_definitionContext_cls) Instrument_definitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Instrument_definitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Instrument_definitionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstrument_parameters(McInstrParser::Instrument_parametersContext *ctx){
    if(!Instrument_parametersContext_cls) Instrument_parametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "Instrument_parametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Instrument_parametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstrumentParameterInteger(McInstrParser::InstrumentParameterIntegerContext *ctx){
    if(!InstrumentParameterIntegerContext_cls) InstrumentParameterIntegerContext_cls = PyObject_GetAttrString(translator->parser_cls, "InstrumentParameterIntegerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InstrumentParameterIntegerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstrumentParameterDouble(McInstrParser::InstrumentParameterDoubleContext *ctx){
    if(!InstrumentParameterDoubleContext_cls) InstrumentParameterDoubleContext_cls = PyObject_GetAttrString(translator->parser_cls, "InstrumentParameterDoubleContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InstrumentParameterDoubleContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstrumentParameterString(McInstrParser::InstrumentParameterStringContext *ctx){
    if(!InstrumentParameterStringContext_cls) InstrumentParameterStringContext_cls = PyObject_GetAttrString(translator->parser_cls, "InstrumentParameterStringContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InstrumentParameterStringContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstrument_parameter_unit(McInstrParser::Instrument_parameter_unitContext *ctx){
    if(!Instrument_parameter_unitContext_cls) Instrument_parameter_unitContext_cls = PyObject_GetAttrString(translator->parser_cls, "Instrument_parameter_unitContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Instrument_parameter_unitContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstrument_trace(McInstrParser::Instrument_traceContext *ctx){
    if(!Instrument_traceContext_cls) Instrument_traceContext_cls = PyObject_GetAttrString(translator->parser_cls, "Instrument_traceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Instrument_traceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstrument_metadata(McInstrParser::Instrument_metadataContext *ctx){
    if(!Instrument_metadataContext_cls) Instrument_metadataContext_cls = PyObject_GetAttrString(translator->parser_cls, "Instrument_metadataContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Instrument_metadataContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstrument_trace_include(McInstrParser::Instrument_trace_includeContext *ctx){
    if(!Instrument_trace_includeContext_cls) Instrument_trace_includeContext_cls = PyObject_GetAttrString(translator->parser_cls, "Instrument_trace_includeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Instrument_trace_includeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitComponent_instance(McInstrParser::Component_instanceContext *ctx){
    if(!Component_instanceContext_cls) Component_instanceContext_cls = PyObject_GetAttrString(translator->parser_cls, "Component_instanceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Component_instanceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstanceNameCopyIdentifier(McInstrParser::InstanceNameCopyIdentifierContext *ctx){
    if(!InstanceNameCopyIdentifierContext_cls) InstanceNameCopyIdentifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "InstanceNameCopyIdentifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InstanceNameCopyIdentifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstanceNameCopy(McInstrParser::InstanceNameCopyContext *ctx){
    if(!InstanceNameCopyContext_cls) InstanceNameCopyContext_cls = PyObject_GetAttrString(translator->parser_cls, "InstanceNameCopyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InstanceNameCopyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstanceNameIdentifier(McInstrParser::InstanceNameIdentifierContext *ctx){
    if(!InstanceNameIdentifierContext_cls) InstanceNameIdentifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "InstanceNameIdentifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InstanceNameIdentifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitComponentTypeIdentifier(McInstrParser::ComponentTypeIdentifierContext *ctx){
    if(!ComponentTypeIdentifierContext_cls) ComponentTypeIdentifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ComponentTypeIdentifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ComponentTypeIdentifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitComponentTypeCopy(McInstrParser::ComponentTypeCopyContext *ctx){
    if(!ComponentTypeCopyContext_cls) ComponentTypeCopyContext_cls = PyObject_GetAttrString(translator->parser_cls, "ComponentTypeCopyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ComponentTypeCopyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstance_parameters(McInstrParser::Instance_parametersContext *ctx){
    if(!Instance_parametersContext_cls) Instance_parametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "Instance_parametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Instance_parametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstanceParameterExpr(McInstrParser::InstanceParameterExprContext *ctx){
    if(!InstanceParameterExprContext_cls) InstanceParameterExprContext_cls = PyObject_GetAttrString(translator->parser_cls, "InstanceParameterExprContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InstanceParameterExprContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstanceParameterNull(McInstrParser::InstanceParameterNullContext *ctx){
    if(!InstanceParameterNullContext_cls) InstanceParameterNullContext_cls = PyObject_GetAttrString(translator->parser_cls, "InstanceParameterNullContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InstanceParameterNullContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInstanceParameterVector(McInstrParser::InstanceParameterVectorContext *ctx){
    if(!InstanceParameterVectorContext_cls) InstanceParameterVectorContext_cls = PyObject_GetAttrString(translator->parser_cls, "InstanceParameterVectorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InstanceParameterVectorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitSplit(McInstrParser::SplitContext *ctx){
    if(!SplitContext_cls) SplitContext_cls = PyObject_GetAttrString(translator->parser_cls, "SplitContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SplitContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitWhen(McInstrParser::WhenContext *ctx){
    if(!WhenContext_cls) WhenContext_cls = PyObject_GetAttrString(translator->parser_cls, "WhenContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, WhenContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitPlace(McInstrParser::PlaceContext *ctx){
    if(!PlaceContext_cls) PlaceContext_cls = PyObject_GetAttrString(translator->parser_cls, "PlaceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PlaceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitOrientation(McInstrParser::OrientationContext *ctx){
    if(!OrientationContext_cls) OrientationContext_cls = PyObject_GetAttrString(translator->parser_cls, "OrientationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, OrientationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitGroupref(McInstrParser::GrouprefContext *ctx){
    if(!GrouprefContext_cls) GrouprefContext_cls = PyObject_GetAttrString(translator->parser_cls, "GrouprefContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GrouprefContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitJumps(McInstrParser::JumpsContext *ctx){
    if(!JumpsContext_cls) JumpsContext_cls = PyObject_GetAttrString(translator->parser_cls, "JumpsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, JumpsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitJump(McInstrParser::JumpContext *ctx){
    if(!JumpContext_cls) JumpContext_cls = PyObject_GetAttrString(translator->parser_cls, "JumpContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, JumpContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitJumpPrevious(McInstrParser::JumpPreviousContext *ctx){
    if(!JumpPreviousContext_cls) JumpPreviousContext_cls = PyObject_GetAttrString(translator->parser_cls, "JumpPreviousContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, JumpPreviousContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitJumpMyself(McInstrParser::JumpMyselfContext *ctx){
    if(!JumpMyselfContext_cls) JumpMyselfContext_cls = PyObject_GetAttrString(translator->parser_cls, "JumpMyselfContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, JumpMyselfContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitJumpIdentifier(McInstrParser::JumpIdentifierContext *ctx){
    if(!JumpIdentifierContext_cls) JumpIdentifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "JumpIdentifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, JumpIdentifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitJumpNext(McInstrParser::JumpNextContext *ctx){
    if(!JumpNextContext_cls) JumpNextContext_cls = PyObject_GetAttrString(translator->parser_cls, "JumpNextContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, JumpNextContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExtend(McInstrParser::ExtendContext *ctx){
    if(!ExtendContext_cls) ExtendContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExtendContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExtendContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitComponent_ref(McInstrParser::Component_refContext *ctx){
    if(!Component_refContext_cls) Component_refContext_cls = PyObject_GetAttrString(translator->parser_cls, "Component_refContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Component_refContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitCoords(McInstrParser::CoordsContext *ctx){
    if(!CoordsContext_cls) CoordsContext_cls = PyObject_GetAttrString(translator->parser_cls, "CoordsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CoordsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitReference(McInstrParser::ReferenceContext *ctx){
    if(!ReferenceContext_cls) ReferenceContext_cls = PyObject_GetAttrString(translator->parser_cls, "ReferenceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReferenceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitDependency(McInstrParser::DependencyContext *ctx){
    if(!DependencyContext_cls) DependencyContext_cls = PyObject_GetAttrString(translator->parser_cls, "DependencyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DependencyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitDeclareBlock(McInstrParser::DeclareBlockContext *ctx){
    if(!DeclareBlockContext_cls) DeclareBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclareBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclareBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitDeclareBlockCopy(McInstrParser::DeclareBlockCopyContext *ctx){
    if(!DeclareBlockCopyContext_cls) DeclareBlockCopyContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclareBlockCopyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclareBlockCopyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitUservars(McInstrParser::UservarsContext *ctx){
    if(!UservarsContext_cls) UservarsContext_cls = PyObject_GetAttrString(translator->parser_cls, "UservarsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UservarsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInitializeBlock(McInstrParser::InitializeBlockContext *ctx){
    if(!InitializeBlockContext_cls) InitializeBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "InitializeBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InitializeBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInitializeBlockCopy(McInstrParser::InitializeBlockCopyContext *ctx){
    if(!InitializeBlockCopyContext_cls) InitializeBlockCopyContext_cls = PyObject_GetAttrString(translator->parser_cls, "InitializeBlockCopyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InitializeBlockCopyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitSaveBlockCopy(McInstrParser::SaveBlockCopyContext *ctx){
    if(!SaveBlockCopyContext_cls) SaveBlockCopyContext_cls = PyObject_GetAttrString(translator->parser_cls, "SaveBlockCopyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SaveBlockCopyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitSaveBlock(McInstrParser::SaveBlockContext *ctx){
    if(!SaveBlockContext_cls) SaveBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "SaveBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SaveBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitFinallyBlock(McInstrParser::FinallyBlockContext *ctx){
    if(!FinallyBlockContext_cls) FinallyBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "FinallyBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FinallyBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitFinallyBlockCopy(McInstrParser::FinallyBlockCopyContext *ctx){
    if(!FinallyBlockCopyContext_cls) FinallyBlockCopyContext_cls = PyObject_GetAttrString(translator->parser_cls, "FinallyBlockCopyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FinallyBlockCopyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitMetadata(McInstrParser::MetadataContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"mime", static_cast<void*>(ctx->mime)},
        {"name", static_cast<void*>(ctx->name)}
    };
    if(!MetadataContext_cls) MetadataContext_cls = PyObject_GetAttrString(translator->parser_cls, "MetadataContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MetadataContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitCategory(McInstrParser::CategoryContext *ctx){
    if(!CategoryContext_cls) CategoryContext_cls = PyObject_GetAttrString(translator->parser_cls, "CategoryContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CategoryContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitInitializerlist(McInstrParser::InitializerlistContext *ctx){
    if(!InitializerlistContext_cls) InitializerlistContext_cls = PyObject_GetAttrString(translator->parser_cls, "InitializerlistContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InitializerlistContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitAssignment(McInstrParser::AssignmentContext *ctx){
    if(!AssignmentContext_cls) AssignmentContext_cls = PyObject_GetAttrString(translator->parser_cls, "AssignmentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AssignmentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryMod(McInstrParser::ExpressionBinaryModContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryModContext_cls) ExpressionBinaryModContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryModContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryModContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryLess(McInstrParser::ExpressionBinaryLessContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryLessContext_cls) ExpressionBinaryLessContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryLessContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryLessContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryGreater(McInstrParser::ExpressionBinaryGreaterContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryGreaterContext_cls) ExpressionBinaryGreaterContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryGreaterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryGreaterContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryLessEqual(McInstrParser::ExpressionBinaryLessEqualContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryLessEqualContext_cls) ExpressionBinaryLessEqualContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryLessEqualContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryLessEqualContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionArrayAccess(McInstrParser::ExpressionArrayAccessContext *ctx){
    if(!ExpressionArrayAccessContext_cls) ExpressionArrayAccessContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionArrayAccessContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionArrayAccessContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryLogic(McInstrParser::ExpressionBinaryLogicContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryLogicContext_cls) ExpressionBinaryLogicContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryLogicContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryLogicContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionInteger(McInstrParser::ExpressionIntegerContext *ctx){
    if(!ExpressionIntegerContext_cls) ExpressionIntegerContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionIntegerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionIntegerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryRightShift(McInstrParser::ExpressionBinaryRightShiftContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryRightShiftContext_cls) ExpressionBinaryRightShiftContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryRightShiftContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryRightShiftContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionMyself(McInstrParser::ExpressionMyselfContext *ctx){
    if(!ExpressionMyselfContext_cls) ExpressionMyselfContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionMyselfContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionMyselfContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionPrevious(McInstrParser::ExpressionPreviousContext *ctx){
    if(!ExpressionPreviousContext_cls) ExpressionPreviousContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionPreviousContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionPreviousContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionIdentifier(McInstrParser::ExpressionIdentifierContext *ctx){
    if(!ExpressionIdentifierContext_cls) ExpressionIdentifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionIdentifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionIdentifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionStructAccess(McInstrParser::ExpressionStructAccessContext *ctx){
    if(!ExpressionStructAccessContext_cls) ExpressionStructAccessContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionStructAccessContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionStructAccessContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionFunctionCall(McInstrParser::ExpressionFunctionCallContext *ctx){
    if(!ExpressionFunctionCallContext_cls) ExpressionFunctionCallContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionFunctionCallContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionFunctionCallContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryMD(McInstrParser::ExpressionBinaryMDContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryMDContext_cls) ExpressionBinaryMDContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryMDContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryMDContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionString(McInstrParser::ExpressionStringContext *ctx){
    if(!ExpressionStringContext_cls) ExpressionStringContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionStringContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionStringContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionGrouping(McInstrParser::ExpressionGroupingContext *ctx){
    if(!ExpressionGroupingContext_cls) ExpressionGroupingContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionGroupingContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionGroupingContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionExponentiation(McInstrParser::ExpressionExponentiationContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"base", static_cast<void*>(ctx->base)},
        {"exponent", static_cast<void*>(ctx->exponent)}
    };
    if(!ExpressionExponentiationContext_cls) ExpressionExponentiationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionExponentiationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionExponentiationContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryLeftShift(McInstrParser::ExpressionBinaryLeftShiftContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryLeftShiftContext_cls) ExpressionBinaryLeftShiftContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryLeftShiftContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryLeftShiftContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryGreaterEqual(McInstrParser::ExpressionBinaryGreaterEqualContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryGreaterEqualContext_cls) ExpressionBinaryGreaterEqualContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryGreaterEqualContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryGreaterEqualContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionZero(McInstrParser::ExpressionZeroContext *ctx){
    if(!ExpressionZeroContext_cls) ExpressionZeroContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionZeroContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionZeroContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionUnaryPM(McInstrParser::ExpressionUnaryPMContext *ctx){
    if(!ExpressionUnaryPMContext_cls) ExpressionUnaryPMContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionUnaryPMContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionUnaryPMContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionTrinaryLogic(McInstrParser::ExpressionTrinaryLogicContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"test", static_cast<void*>(ctx->test)},
        {"true", static_cast<void*>(ctx->true)},
        {"false", static_cast<void*>(ctx->false)}
    };
    if(!ExpressionTrinaryLogicContext_cls) ExpressionTrinaryLogicContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionTrinaryLogicContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionTrinaryLogicContext_cls, labels, 3);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionFloat(McInstrParser::ExpressionFloatContext *ctx){
    if(!ExpressionFloatContext_cls) ExpressionFloatContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionFloatContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionFloatContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionPointerAccess(McInstrParser::ExpressionPointerAccessContext *ctx){
    if(!ExpressionPointerAccessContext_cls) ExpressionPointerAccessContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionPointerAccessContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionPointerAccessContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryEqual(McInstrParser::ExpressionBinaryEqualContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryEqualContext_cls) ExpressionBinaryEqualContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryEqualContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryEqualContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionBinaryPM(McInstrParser::ExpressionBinaryPMContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"left", static_cast<void*>(ctx->left)},
        {"right", static_cast<void*>(ctx->right)}
    };
    if(!ExpressionBinaryPMContext_cls) ExpressionBinaryPMContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionBinaryPMContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionBinaryPMContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitExpressionUnaryLogic(McInstrParser::ExpressionUnaryLogicContext *ctx){
    if(!ExpressionUnaryLogicContext_cls) ExpressionUnaryLogicContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionUnaryLogicContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionUnaryLogicContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitShell(McInstrParser::ShellContext *ctx){
    if(!ShellContext_cls) ShellContext_cls = PyObject_GetAttrString(translator->parser_cls, "ShellContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ShellContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitSearchPath(McInstrParser::SearchPathContext *ctx){
    if(!SearchPathContext_cls) SearchPathContext_cls = PyObject_GetAttrString(translator->parser_cls, "SearchPathContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SearchPathContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitSearchShell(McInstrParser::SearchShellContext *ctx){
    if(!SearchShellContext_cls) SearchShellContext_cls = PyObject_GetAttrString(translator->parser_cls, "SearchShellContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SearchShellContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_McInstrTranslator::visitUnparsed_block(McInstrParser::Unparsed_blockContext *ctx){
    if(!Unparsed_blockContext_cls) Unparsed_blockContext_cls = PyObject_GetAttrString(translator->parser_cls, "Unparsed_blockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Unparsed_blockContext_cls);
    return py_ctx;
}
